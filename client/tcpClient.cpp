#define _WIN32_WINNT 0x501

#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>

#define IP          "192.168.0.23"
#define PORT        "12345"

int send(char* buffer, int size) 
{
    int result;

    // initialize Winsock
    WSADATA wsaData;
    result = WSAStartup(MAKEWORD(2,2), &wsaData);
    if(result != 0)
    {
        std::cout << "WSAStartup failed with error: " << result << std::endl;
        return -1;
    }

    struct addrinfo hints;
    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // resolve the server address and port
    struct addrinfo *addressInfo = NULL;
    result = getaddrinfo(IP, PORT, &hints, &addressInfo);
    if(result != 0)
    {
        std::cout << "getaddrinfo failed with error: " << result << std::endl;
        WSACleanup();
        return -2;
    }

    // attempt to connect to an address until one succeeds
    SOCKET clientSocket = INVALID_SOCKET;
    for(struct addrinfo *ptr = addressInfo; ptr != NULL; ptr = ptr->ai_next)
    {
        // create socket
        clientSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
        if(clientSocket == INVALID_SOCKET)
        {
            std::cout << "socket failed with error: " << WSAGetLastError() << std::endl;
            WSACleanup();
            return -3;
        }

        // connect to server
        result = connect(clientSocket, ptr->ai_addr, (int) ptr->ai_addrlen);
        if(result == SOCKET_ERROR)
        {
            closesocket(clientSocket);
            clientSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }

    freeaddrinfo(addressInfo);

    if(clientSocket == INVALID_SOCKET)
    {
        std::cout << "Unable to connect to server!" << std::endl;
        WSACleanup();
        return -4;
    }

    // send data
    int sendResult = send(clientSocket, buffer, size, 0);
    if(sendResult == SOCKET_ERROR)
    {
        std::cout << "send failed with error: " << WSAGetLastError() << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return -5;
    }

    // shutdown the connection since no more data will be sent
    result = shutdown(clientSocket, SD_SEND);
    if(result == SOCKET_ERROR) {
        std::cout << "shutdown failed with error: " << WSAGetLastError() << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return -6;
    }
    
    return sendResult;
}