#include <iostream>
#include <windows.h>
#include <winsock2.h>

#define BUFF_SIZE   512
#define IP          "192.168.0.23"
#define PORT        12345

int receive(char* buffer, int bufferSize)
{
    WSADATA wsaData;
    SOCKET listenSocket = INVALID_SOCKET;
    SOCKET clientSocket = INVALID_SOCKET;
    int result;

    result = WSAStartup(MAKEWORD(2,2), &wsaData);
    if(result != 0)
    {
        std::cout << "WSAStartup failed with error: " << result << std::endl;
        return -1;
    }

    struct sockaddr_in addr;
    ZeroMemory(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr(IP);
    addr.sin_port = htons(PORT);

    listenSocket = socket(addr.sin_family, SOCK_STREAM, IPPROTO_TCP);
    if(listenSocket == INVALID_SOCKET)
    {
        std::cout << "socket failed with error: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return -2;
    }

    result = bind(listenSocket, (SOCKADDR*) &addr, sizeof(addr));
    if(result == SOCKET_ERROR)
    {
        std::cout << "bind failed with error: " << WSAGetLastError() << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return -3;
    }

    result = listen(listenSocket, SOMAXCONN);
    if(result == SOCKET_ERROR)
    {
        std::cout << "listen failed with error: " << WSAGetLastError() << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return -4;
    }

    clientSocket = accept(listenSocket, NULL, NULL);
    if(clientSocket == INVALID_SOCKET)
    {
        std::cout << "accept failed with error: " << WSAGetLastError() << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return -5;
    }

    closesocket(listenSocket);
    int readCount = 0;
    
    do
    {
        result = recv(clientSocket, buffer + readCount, bufferSize, 0);
        if(result > 0)
        {
            bufferSize -= result;
            readCount += result;
        }
        else if(result == 0 || WSAGetLastError() == WSAECONNRESET)
            ;
        else 
        {
            std::cout << "recv failed with error: " << WSAGetLastError() << std::endl;
            closesocket(clientSocket);
            WSACleanup();
            return -6;
        }
    }
    while(result > 0 && bufferSize > 0);

    result = shutdown(clientSocket, SD_RECEIVE);
    if(result == SOCKET_ERROR)
    {
        std::cout << "shutdown failed with error: " << WSAGetLastError() << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return -7;
    }

    closesocket(clientSocket);
    WSACleanup();

    return readCount;
}